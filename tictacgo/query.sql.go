// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package tictacgo

import (
	"context"

	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

const getGame = `-- name: GetGame :one
SELECT id, first_player, second_player, creating_player, board_state, turn, updated_on, started_on, result FROM games
WHERE id = $1
`

func (q *Queries) GetGame(ctx context.Context, id int64) (Game, error) {
	row := q.db.QueryRow(ctx, getGame, id)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.FirstPlayer,
		&i.SecondPlayer,
		&i.CreatingPlayer,
		&i.BoardState,
		&i.Turn,
		&i.UpdatedOn,
		&i.StartedOn,
		&i.Result,
	)
	return i, err
}

const getGames = `-- name: GetGames :many
SELECT id, first_player, second_player, creating_player, board_state, turn, updated_on, started_on, result FROM games
WHERE id > $1 AND (first_player = COALESCE($2, first_player) OR second_player = COALESCE($3, second_player)) AND result != 0
ORDER BY id ASC LIMIT $4
`

type GetGamesParams struct {
	ID           int64
	FirstPlayer  int64
	SecondPlayer int64
	Limit        int32
}

func (q *Queries) GetGames(ctx context.Context, arg GetGamesParams) ([]Game, error) {
	rows, err := q.db.Query(ctx, getGames,
		arg.ID,
		arg.FirstPlayer,
		arg.SecondPlayer,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Game
	for rows.Next() {
		var i Game
		if err := rows.Scan(
			&i.ID,
			&i.FirstPlayer,
			&i.SecondPlayer,
			&i.CreatingPlayer,
			&i.BoardState,
			&i.Turn,
			&i.UpdatedOn,
			&i.StartedOn,
			&i.Result,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSteps = `-- name: GetSteps :many
SELECT game_id, ord, move_row, move_col, board, turn FROM game_steps 
WHERE game_id = ANY ($1::BIGINT[])
ORDER BY game_id, ord
`

func (q *Queries) GetSteps(ctx context.Context, dollar_1 []int64) ([]GameStep, error) {
	rows, err := q.db.Query(ctx, getSteps, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GameStep
	for rows.Next() {
		var i GameStep
		if err := rows.Scan(
			&i.GameID,
			&i.Ord,
			&i.MoveRow,
			&i.MoveCol,
			&i.Board,
			&i.Turn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertGame = `-- name: InsertGame :execresult
INSERT INTO 
games (first_player, second_player, creating_player, board_state, turn, updated_on, started_on) 
VALUES ($1, $2, $3, $4, $5, $6, $7)
`

type InsertGameParams struct {
	FirstPlayer    int64
	SecondPlayer   int64
	CreatingPlayer int64
	BoardState     []byte
	Turn           pgtype.Bool
	UpdatedOn      pgtype.Timestamp
	StartedOn      pgtype.Timestamp
}

func (q *Queries) InsertGame(ctx context.Context, arg InsertGameParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, insertGame,
		arg.FirstPlayer,
		arg.SecondPlayer,
		arg.CreatingPlayer,
		arg.BoardState,
		arg.Turn,
		arg.UpdatedOn,
		arg.StartedOn,
	)
}

const insertStep = `-- name: InsertStep :execresult
INSERT INTO 
game_steps (game_id, ord, move_row, move_col, board, turn) 
VALUES ($1, $2, $3, $4, $5, $6)
`

type InsertStepParams struct {
	GameID  int64
	Ord     int32
	MoveRow int32
	MoveCol int32
	Board   []byte
	Turn    pgtype.Bool
}

func (q *Queries) InsertStep(ctx context.Context, arg InsertStepParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, insertStep,
		arg.GameID,
		arg.Ord,
		arg.MoveRow,
		arg.MoveCol,
		arg.Board,
		arg.Turn,
	)
}

const updateGame = `-- name: UpdateGame :execresult
UPDATE games 
SET board_state = $1, turn = $2, updated_on = $3, result = $4
WHERE id = $5
`

type UpdateGameParams struct {
	BoardState []byte
	Turn       pgtype.Bool
	UpdatedOn  pgtype.Timestamp
	Result     int32
	ID         int64
}

func (q *Queries) UpdateGame(ctx context.Context, arg UpdateGameParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, updateGame,
		arg.BoardState,
		arg.Turn,
		arg.UpdatedOn,
		arg.Result,
		arg.ID,
	)
}
