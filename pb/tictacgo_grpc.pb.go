// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: pb/tictacgo.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TicTacGoService_Register_FullMethodName    = "/service.TicTacGoService/Register"
	TicTacGoService_Login_FullMethodName       = "/service.TicTacGoService/Login"
	TicTacGoService_GetPlayers_FullMethodName  = "/service.TicTacGoService/GetPlayers"
	TicTacGoService_CreateGame_FullMethodName  = "/service.TicTacGoService/CreateGame"
	TicTacGoService_GetGames_FullMethodName    = "/service.TicTacGoService/GetGames"
	TicTacGoService_GetGame_FullMethodName     = "/service.TicTacGoService/GetGame"
	TicTacGoService_MakeMove_FullMethodName    = "/service.TicTacGoService/MakeMove"
	TicTacGoService_ListenSteps_FullMethodName = "/service.TicTacGoService/ListenSteps"
	TicTacGoService_WhoAmI_FullMethodName      = "/service.TicTacGoService/WhoAmI"
)

// TicTacGoServiceClient is the client API for TicTacGoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TicTacGoServiceClient interface {
	Register(ctx context.Context, in *CredentialsReq, opts ...grpc.CallOption) (*Player, error)
	Login(ctx context.Context, in *CredentialsReq, opts ...grpc.CallOption) (*LoginResp, error)
	GetPlayers(ctx context.Context, in *GetPlayersReq, opts ...grpc.CallOption) (*Players, error)
	CreateGame(ctx context.Context, in *CreateGameReq, opts ...grpc.CallOption) (*Game, error)
	GetGames(ctx context.Context, in *GetGamesReq, opts ...grpc.CallOption) (*Games, error)
	GetGame(ctx context.Context, in *GetGameReq, opts ...grpc.CallOption) (*Game, error)
	MakeMove(ctx context.Context, in *MakeMoveReq, opts ...grpc.CallOption) (*Game, error)
	ListenSteps(ctx context.Context, in *GetGameReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Step], error)
	WhoAmI(ctx context.Context, in *AuthToken, opts ...grpc.CallOption) (*Player, error)
}

type ticTacGoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTicTacGoServiceClient(cc grpc.ClientConnInterface) TicTacGoServiceClient {
	return &ticTacGoServiceClient{cc}
}

func (c *ticTacGoServiceClient) Register(ctx context.Context, in *CredentialsReq, opts ...grpc.CallOption) (*Player, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Player)
	err := c.cc.Invoke(ctx, TicTacGoService_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticTacGoServiceClient) Login(ctx context.Context, in *CredentialsReq, opts ...grpc.CallOption) (*LoginResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, TicTacGoService_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticTacGoServiceClient) GetPlayers(ctx context.Context, in *GetPlayersReq, opts ...grpc.CallOption) (*Players, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Players)
	err := c.cc.Invoke(ctx, TicTacGoService_GetPlayers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticTacGoServiceClient) CreateGame(ctx context.Context, in *CreateGameReq, opts ...grpc.CallOption) (*Game, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Game)
	err := c.cc.Invoke(ctx, TicTacGoService_CreateGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticTacGoServiceClient) GetGames(ctx context.Context, in *GetGamesReq, opts ...grpc.CallOption) (*Games, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Games)
	err := c.cc.Invoke(ctx, TicTacGoService_GetGames_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticTacGoServiceClient) GetGame(ctx context.Context, in *GetGameReq, opts ...grpc.CallOption) (*Game, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Game)
	err := c.cc.Invoke(ctx, TicTacGoService_GetGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticTacGoServiceClient) MakeMove(ctx context.Context, in *MakeMoveReq, opts ...grpc.CallOption) (*Game, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Game)
	err := c.cc.Invoke(ctx, TicTacGoService_MakeMove_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticTacGoServiceClient) ListenSteps(ctx context.Context, in *GetGameReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Step], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TicTacGoService_ServiceDesc.Streams[0], TicTacGoService_ListenSteps_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetGameReq, Step]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TicTacGoService_ListenStepsClient = grpc.ServerStreamingClient[Step]

func (c *ticTacGoServiceClient) WhoAmI(ctx context.Context, in *AuthToken, opts ...grpc.CallOption) (*Player, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Player)
	err := c.cc.Invoke(ctx, TicTacGoService_WhoAmI_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TicTacGoServiceServer is the server API for TicTacGoService service.
// All implementations must embed UnimplementedTicTacGoServiceServer
// for forward compatibility.
type TicTacGoServiceServer interface {
	Register(context.Context, *CredentialsReq) (*Player, error)
	Login(context.Context, *CredentialsReq) (*LoginResp, error)
	GetPlayers(context.Context, *GetPlayersReq) (*Players, error)
	CreateGame(context.Context, *CreateGameReq) (*Game, error)
	GetGames(context.Context, *GetGamesReq) (*Games, error)
	GetGame(context.Context, *GetGameReq) (*Game, error)
	MakeMove(context.Context, *MakeMoveReq) (*Game, error)
	ListenSteps(*GetGameReq, grpc.ServerStreamingServer[Step]) error
	WhoAmI(context.Context, *AuthToken) (*Player, error)
	mustEmbedUnimplementedTicTacGoServiceServer()
}

// UnimplementedTicTacGoServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTicTacGoServiceServer struct{}

func (UnimplementedTicTacGoServiceServer) Register(context.Context, *CredentialsReq) (*Player, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedTicTacGoServiceServer) Login(context.Context, *CredentialsReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedTicTacGoServiceServer) GetPlayers(context.Context, *GetPlayersReq) (*Players, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayers not implemented")
}
func (UnimplementedTicTacGoServiceServer) CreateGame(context.Context, *CreateGameReq) (*Game, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGame not implemented")
}
func (UnimplementedTicTacGoServiceServer) GetGames(context.Context, *GetGamesReq) (*Games, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGames not implemented")
}
func (UnimplementedTicTacGoServiceServer) GetGame(context.Context, *GetGameReq) (*Game, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGame not implemented")
}
func (UnimplementedTicTacGoServiceServer) MakeMove(context.Context, *MakeMoveReq) (*Game, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeMove not implemented")
}
func (UnimplementedTicTacGoServiceServer) ListenSteps(*GetGameReq, grpc.ServerStreamingServer[Step]) error {
	return status.Errorf(codes.Unimplemented, "method ListenSteps not implemented")
}
func (UnimplementedTicTacGoServiceServer) WhoAmI(context.Context, *AuthToken) (*Player, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhoAmI not implemented")
}
func (UnimplementedTicTacGoServiceServer) mustEmbedUnimplementedTicTacGoServiceServer() {}
func (UnimplementedTicTacGoServiceServer) testEmbeddedByValue()                         {}

// UnsafeTicTacGoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TicTacGoServiceServer will
// result in compilation errors.
type UnsafeTicTacGoServiceServer interface {
	mustEmbedUnimplementedTicTacGoServiceServer()
}

func RegisterTicTacGoServiceServer(s grpc.ServiceRegistrar, srv TicTacGoServiceServer) {
	// If the following call pancis, it indicates UnimplementedTicTacGoServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TicTacGoService_ServiceDesc, srv)
}

func _TicTacGoService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CredentialsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicTacGoServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicTacGoService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicTacGoServiceServer).Register(ctx, req.(*CredentialsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicTacGoService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CredentialsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicTacGoServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicTacGoService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicTacGoServiceServer).Login(ctx, req.(*CredentialsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicTacGoService_GetPlayers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicTacGoServiceServer).GetPlayers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicTacGoService_GetPlayers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicTacGoServiceServer).GetPlayers(ctx, req.(*GetPlayersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicTacGoService_CreateGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicTacGoServiceServer).CreateGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicTacGoService_CreateGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicTacGoServiceServer).CreateGame(ctx, req.(*CreateGameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicTacGoService_GetGames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGamesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicTacGoServiceServer).GetGames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicTacGoService_GetGames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicTacGoServiceServer).GetGames(ctx, req.(*GetGamesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicTacGoService_GetGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicTacGoServiceServer).GetGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicTacGoService_GetGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicTacGoServiceServer).GetGame(ctx, req.(*GetGameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicTacGoService_MakeMove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeMoveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicTacGoServiceServer).MakeMove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicTacGoService_MakeMove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicTacGoServiceServer).MakeMove(ctx, req.(*MakeMoveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicTacGoService_ListenSteps_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetGameReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TicTacGoServiceServer).ListenSteps(m, &grpc.GenericServerStream[GetGameReq, Step]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TicTacGoService_ListenStepsServer = grpc.ServerStreamingServer[Step]

func _TicTacGoService_WhoAmI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicTacGoServiceServer).WhoAmI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicTacGoService_WhoAmI_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicTacGoServiceServer).WhoAmI(ctx, req.(*AuthToken))
	}
	return interceptor(ctx, in, info, handler)
}

// TicTacGoService_ServiceDesc is the grpc.ServiceDesc for TicTacGoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TicTacGoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.TicTacGoService",
	HandlerType: (*TicTacGoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _TicTacGoService_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _TicTacGoService_Login_Handler,
		},
		{
			MethodName: "GetPlayers",
			Handler:    _TicTacGoService_GetPlayers_Handler,
		},
		{
			MethodName: "CreateGame",
			Handler:    _TicTacGoService_CreateGame_Handler,
		},
		{
			MethodName: "GetGames",
			Handler:    _TicTacGoService_GetGames_Handler,
		},
		{
			MethodName: "GetGame",
			Handler:    _TicTacGoService_GetGame_Handler,
		},
		{
			MethodName: "MakeMove",
			Handler:    _TicTacGoService_MakeMove_Handler,
		},
		{
			MethodName: "WhoAmI",
			Handler:    _TicTacGoService_WhoAmI_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListenSteps",
			Handler:       _TicTacGoService_ListenSteps_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pb/tictacgo.proto",
}
